# -*- coding: utf-8 -*-
"""spacySimilarityV2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RJNi7KreFAlggLEO22qfvPLEuNGUnIYJ
"""

'''
import spacy
import pandas as pd
import numpy as np
spacy.cli.download("en_core_web_lg")
nlp = spacy.load('en_core_web_lg')


from google.colab import drive
drive.mount('/content/drive')
'''



def calcular_media(valores):
  d = len(valores)
  sum = 0;
  for v in valores:
    sum = sum + v;
  #print('MEDIA: ',sum/d)
  return sum/d

def countstr(string):
  splt = string.split(" ")
  #print("------------", len(splt))
  return len(splt)

def similaridade(string1, string2, nlp, rank_matters, absolute_value):
  doc1 = nlp(string1)
  doc2 = nlp(string2)
  valores = []
  size = countstr(string1) 
  aux = size 
  for token1 in doc1:
    size1 = countstr(string2) 
    aux1 = size1 

    for token2 in doc2:
      if token2.has_vector and token1.has_vector:
        v = token1.similarity(token2)

        if rank_matters == True and absolute_value == False:
          valores.append((v*aux/size) * (v*aux1/size1))

        elif rank_matters == True and absolute_value == True:
          valores.append(abs(v)*aux/size * abs(v)*aux1/size1)

        elif rank_matters == False and absolute_value == True:
          valores.append(abs(v)) 

        elif rank_matters == False and absolute_value == False:
          valores.append(v) 

      elif token2.text == token1.text:
  
        if rank_matters:
          valores.append(1 + aux/size * aux1/size1)
        else:
          valores.append(1)

      aux1 -= 1
    aux -= 1
  med = calcular_media(valores)
  return med

def has_vec(string, nlp):
  doc = nlp(string)
  for token in doc:
    return token.has_vector

def remove_(lista, nlp):
  topicos = []
  for t in lista:
    lista_aux = []
    for word in t:
      if "_"  in word:
        aux = word.split('_')
        if has_vec(aux[0]+aux[1], nlp):
          lista_aux.append((aux[0]+aux[1]))
        
        lista_aux.append(aux[0])
        lista_aux.append(aux[1])
      lista_aux.append(word)
    topicos.append(lista_aux)
    
  return topicos

def spacy_simi(topicost1, topicost2, nlp, rank_matters = False, absolute_value = False):
  topicost1 = remove_(topicost1, nlp)
  topicost2 = remove_(topicost2, nlp)
  medias = []
  for topico1 in range(len(topicost1)):
      string1 = " ".join(w for w in topicost1[topico1])
      maior_media = 0
      v = []
      melhor_topico = 0
      for topico2 in range(len(topicost2)):
        string2 = " ".join(w for w in topicost2[topico2])
        #print("{} - {} ---COM --- {} - {}".format(topico2, string2, topico1, string1))
        m = similaridade(string1, string2, nlp, rank_matters, absolute_value)
        v.append([m])
        media = m
        if media > maior_media:
          maior_media = media
          melhor_topico = topico2
      medias.append([topico1, melhor_topico, maior_media])
  return medias


"""## 2 tecnica"""

'''
import spacy
spacy.cli.download("en_core_web_lg")
nlp = spacy.load('en_core_web_lg')

teste1 =[['car', 'motor', 'gas', 'bike', 'transit', 'carriage', 'jeep', 'loaner', 'backseat', 'truck'], 
         ['home', 'family', 'mansion', 'toilet', 'living_room', 'room', 'attic', 'door', 'cabin']]

teste2 = [['room', 'restaurant', 'house', 'grill', 'wood', 'laundry', 'stove', 'cooking', 'closet', 'bed'],
          ['gasoline' , 'engine', 'cart', 'volvo', 'motorcycle', 'driver', 'radiator', 'taxi', 'suzuki'],]

medias = spacy_simi(teste1, teste2, nlp, rank_matters = True, absolute_value = True)

for l in medias:
  print(teste1[l[0]])
  print(teste2[l[1]])
  print("Value: ",l[2])
  print("-------------------------")
'''